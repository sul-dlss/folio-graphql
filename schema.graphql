# These are non-core graphql types; resolvers are provided by graphql-scalars
scalar DateTime
scalar UUID
scalar EmailAddress

enum PatronStatus {
  OK
  BLOCKED
}

enum PatronStanding {
  OK
  BARRED
  COLLECTION
  BLOCKED
  DELINQUENT
}

input CqlParams {
  query: String
  limit: Int
  offset: Int
  sortby: String
}

# We only need one query; all the magic happens in the resolvers
type Query {
  patron(id: UUID!): Patron

  instance(id: UUID!): Instance
  instances(id: [String], hrid: [String], params: CqlParams): [Instance]

  holdingsRecord(id: UUID!): HoldingsRecord
  holdingsRecords(id: [String], hrid: [String], params: CqlParams): [HoldingsRecord]

  item(id: UUID!): Item
  items(id: [String], hrid: [String], params: CqlParams): [Item]

  loanPolicies(params: CqlParams): [LoanPolicy]
  libraries(params: CqlParams): [Library]
}

type Patron {
  id: UUID
  user: User
  totalCharges: ChargeAmount!
  totalChargesCount: Int!,
  totalLoans: Int!,
  totalHolds: Int!,
  charges: [Charge]!,
  holds: [Hold]!,
  loans: [Loan]!
}

type User {
  id: UUID
  username: String
  externalSystemId: String
  barcode: String
  active: Boolean
  type: String
  patronGroupId: UUID
  patronGroup: PatronGroup
  department: [UUID]
  personal: Personal
  enrollmentDate: DateTime
  expirationDate: DateTime
  metadata: Metadata
  tags: Tags
}

type PatronGroup {
  group: String!
  desc: String
  id: UUID
  expirationOffsetInDays: Int
}

type Personal {
  lastName: String!
  firstName: String
  middleName: String
  preferredFirstName: String
  email: EmailAddress
  phone: String
  mobilePhone: String
  dateOfBirth: DateTime
  preferredContactTypeId: String
}

type Address {
  id: String
  countryId: String
  addressLine1: String
  addressLine2: String
  city: String
  region: String
  postalCode: String
  addressTypeId: UUID!
  primaryAddress: Boolean
}

type Metadata {
  createdDate: DateTime!
  createdByUserId: UUID
  createdByUsername: String
  updatedDate: DateTime
  updatedByUserId: UUID
  updatedByUsername: String
}

type Tags {
  tagList: [String]
}

type RequestItem {
  instanceId: UUID!
  itemId: UUID
  title: String
  author: String
  isbn: String
  instance: Instance
  item: Item
}

type Charge {
  item: RequestItem
  chargeAmount: ChargeAmount
  accrualDate: DateTime
  description: String
  state: String
  reason: String
  feeFineId: UUID
  feeFine: FeeFine
}

type ChargeAmount {
  amount: Float!
  isoCurrencyCode: String!
}

type FeeFine {
  id: UUID,
  automatic: Boolean!,
  feeFineType: String!,
  defaultAmount: Float,
  chargeNoticeId: UUID,
  actionNoticeId: UUID,
  ownerId: UUID,
  metadata: Metadata
}

type Hold {
  requestId: UUID!
  item: RequestItem
  requestDate: DateTime!
  expirationDate: DateTime
  status: String
  pickupLocationId: UUID!
  pickupLocation: ServicePoint
  queuePosition: Int
  cancellationReasonId: UUID
  canceledByUserId: UUID
  cancellationAdditionalInformation: String
  canceledDate: DateTime
  patronComments: String
}

type ServicePoint {
  id: UUID
  name: String!
  code: String!
  discoveryDisplayName: String!
  description: String
  shelvingLagTime: Int
  pickupLocation: Boolean
}

type Loan {
  id: UUID
  item: RequestItem!
  loanDate: DateTime!
  dueDate: DateTime!
  overdue: Boolean!
  details: CirculationLoan!
}

type CirculationLoan {
  id: UUID!
  userId: UUID
  proxyUserId: UUID
  itemId: UUID
  item: Item
  loanPolicyId: UUID
  loanPolicy: LoanPolicy
  overdueFinePolicyId: UUID
  lostItemPolicyId: UUID
  itemEffectiveLocationIdAtCheckOut: UUID
  itemEffectiveLocationAtCheckOut: Location
  status: String
  loanDate: DateTime!
  dueDate: DateTime
  returnDate: DateTime
  systemReturnDate: DateTime
  action: String!
  actionComment: String
  renewalCount: Int
  dueDateChangedByRecall: Boolean
  dueDateChangedByHold: Boolean
  feesAndFines: CirculationLoanFeesAndFines
  declaredLostDate: DateTime
}

type LoanPolicy {
  id: UUID!
  name: String
  description: String
  loansPolicy: LoansPolicy
  renewalsPolicy: RenewalsPolicy
}

type LoansPolicy {
  profileId: String
  period: Period
  fixedDueDateScheduleId: UUID
  fixedDueDateSchedule: FixedDueDateSchedule
}

type FixedDueDateSchedule {
  id: UUID!
  name: String!
  description: String
  schedules: [Schedule]
}

type Schedule {
  from: DateTime!
  to: DateTime!
  due: DateTime!
}

type Period {
  duration: Int!
  intervalId: String!
}

type RenewalsPolicy {
  unlimited: Boolean
  numberAllowed: Int
  renewable: Boolean
  renewFromId: String
  period: Period
}

type CirculationLoanFeesAndFines {
  amountRemainingToPay: Int
}

type Instance {
  id: UUID!
  _version: Int!
  hrid: String!
  matchKey: String
  source: String!
  title: String
  indexTitle: String
  alternativeTitles: [AlternativeTitle]
  editions: [String]
  series: [String]
  identifiers: [Identifier]
  contributors: [Contributor]
  subjects: [String]
  classifications: [Classification]
  publication: [Publication]
  publicationFrequency: [String]
  publicationRange: [String]
  publicationPeriod: [PublicationPeriod]
  electronicAccess: [ElectronicAccess]
  instanceTypeId: UUID
  instanceFormatIds: [UUID]
  physicalDescriptions: [String]
  languages: [String]
  notes: [InstanceNote]
  administrativeNotes: [String]
  modeOfIssuanceId: UUID
  catalogedDate: String
  previouslyHeld: Boolean
  staffSuppress: Boolean
  discoverySuppress: Boolean
  statisticalCodeIds: [String]
  sourceRecordFormat: String
  statusId: UUID
  statusUpdatedDate: String
  tags: [Tag]
  metadata: Metadata
  natureOfContentTypeIds: [UUID]
  holdingsRecords(params: CqlParams): [HoldingsRecord]
  items(params: CqlParams): [Item]
}

type AlternativeTitle {
  alternativeTitleTypeId: UUID
  alternativeTitle: String
}

type Identifier {
  value: String!
  identifierTypeId: UUID!
}

type Contributor {
  name: String!
  contributorTypeId: UUID!
  contributorTypeText: String
  contributorNameTypeId: String
  authorityId: UUID
  primary: Boolean
}

type Classification {
  classificationNumber: String!
  classificationTypeId: UUID!
  classificationType: ClassificationType
}

type ClassificationType {
  id: UUID!
  name: String!
  source: String
  metadata: Metadata
}

type Publication {
  publisher: String
  place: String
  dateOfPublication: String
  role: String
}

type PublicationPeriod {
  start: Int
  end: Int
}

type ElectronicAccess {
  uri: String!
  linkText: String
  materialsSpecification: String
  publicNote: String
  relationshipId: UUID
}

type InstanceNote {
  instanceNoteTypeId: UUID
  note: String
  staffOnly: Boolean
}

type Tag {
  tagList: [String]
}

type Item {
  id: UUID!
  _version: Int!
  hrid: String
  holdingsRecordId: String!
  formerIds: [String]
  discoverySuppress: Boolean
  accessionNumber: String
  barcode: String
  effectiveShelvingOrder: String
  itemLevelCallNumber: String
  itemLevelCallNumberPrefix: String
  itemLevelCallNumberSuffix: String
  itemLevelCallNumberTypeId: String
  effectiveCallNumberComponents: EffectiveCallNumberComponents
  volume: String
  enumeration: String
  chronology: String
  yearCaption: [String]
  itemIdentifier: String
  copyNumber: String
  numberOfPieces: String
  descriptionOfPieces: String
  numberOfMissingPieces: String
  missingPieces: String
  missingPiecesDate: String
  itemDamagedStatusId: String
  itemDamagedStatusDate: String
  administrativeNotes: [String]
  notes: [ItemNote]
  circulationNotes: [CirculationNote]
  status: Status!
  materialTypeId: String!
  permanentLoanTypeId: String!
  temporaryLoanTypeId: String
  permanentLocationId: String
  temporaryLocationId: String
  effectiveLocationId: String
  electronicAccess: [ElectronicAccess]
  inTransitDestinationServicePointId: UUID
  statisticalCodes: [UUID]
  purchaseOrderLineIdentifier: String
  tags: [Tag]
  metadata: Metadata
  lastCheckIn: CheckIn
  holdingsRecord: HoldingsRecord
  instance: Instance
  permanentLocation: Location
  temporaryLocation: Location
  effectiveLocation: Location
}

type EffectiveCallNumberComponents {
  callNumber: String
  prefix: String
  suffix: String
  typeId: UUID
}

type ItemNote {
  itemNoteTypeId: String
  note: String
  staffOnly: Boolean
}

type CirculationNote {
  id: String
  noteType: String
  note: String
  source: Source
  date: String
  staffOnly: Boolean
}

type Source {
  id: String
  personal: Personal
}

type Personal {
  lastName: String
  firstName: String
}

type Status {
  name: String!
  date: String
}

type CheckIn {
  dateTime: String
  servicePointId: UUID
  staffMemberId: UUID
}

type HoldingsRecord {
  id: UUID
  _version: Int
  hrid: String
  holdingsTypeId: UUID
  formatIds: [String]
  instanceId: UUID!
  permanentLocationId: UUID!
  temporaryLocationId: UUID
  effectiveLocationId: UUID
  electronicAccess: [ElectronicAccess]
  callNumberTypeId: UUID
  callNumberPrefix: String
  callNumber: String
  callNumberSuffix: String
  shelvingTitle: String
  acquisitionFormat: String
  receiptStatus: String
  administrativeNotes: [String]
  notes: [HoldingsNote]
  illPolicyId: UUID
  retentionPolicy: String
  digitizationPolicy: String
  holdingsStatement: [HoldingsStatement]
  holdingsStatementsForIndexes: [HoldingsStatement]
  holdingsStatementsForSupplements: [HoldingsStatement]
  copyNumber: String
  numberOfItems: String
  receivingHistory: ReceivingHistory
  discoverySuppress: Boolean
  statisticalCodeIds: [UUID]
  tags: [Tag]
  metadata: Metadata
  sourceId: UUID
  instance: Instance,
  items(params: CqlParams): [Item]
  permanentLocation: Location
  temporaryLocation: Location
  effectiveLocation: Location
}

type HoldingsNote {
  holdingsNoteTypeId: UUID
  note: String
  staffOnly: Boolean
}

type HoldingsStatement {
  statement: String
  note: String
  staffNote: String
}

type ReceivingHistory {
  displayType: String
  entries: [ReceivingHistoryEntry]
}

type ReceivingHistoryEntry {
  publicDisplay: Boolean
  enumeration: String
  chronology: String
}

type Location {
  id: String
  name: String!
  code: String!
  description: String
  discoveryDisplayName: String
  isActive: Boolean
  institutionId: String!
  campusId: String!
  libraryId: String!
  primaryServicePoint: UUID!
  servicePointIds: [UUID]
  metadata: Metadata
  institution: Institution
  campus: Campus
  library: Library
  primaryServicePointObject: ServicePoint
  servicePoints: [ServicePoint]
}

type Institution {
  id: String
  name: String!
  code: String!
  metadata: Metadata
}

type Campus {
  id: String
  name: String!
  code: String!
  institutionId: String!
  institution: Institution
  metadata: Metadata
}

type Library {
  id: String
  name: String!
  code: String!
  campusId: String!
  campus: Campus
  locations: [Location]
  metadata: Metadata
}
